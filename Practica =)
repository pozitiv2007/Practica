using System;
using System.Collections.Generic;



                                                                                                //Practica 3 Вариант 1//
/* 
public class Point
{
    private int x, y;

    public Point()
    {
        x = 0;
        y = 0;
    }

    public Point(int x, int y)
    {
        this.x = x;
        this.y = y;
    }

    public void Display()
    {
        Console.WriteLine($"Координаты точки: ({x}, {y})");
    }

    public double DistanceFromOrigin()
    {
        return Math.Sqrt(x * x + y * y);
    }

    public void Move(int a, int b)
    {
        x += a;
        y += b;
    }

    public int X
    {
        get => x;
        set => x = value;
    }

    public int Y
    {
        get => y;
        set => y = value;
    }

    public int this[int index]
    {
        get
        {
            if (index == 0) return x;
            if (index == 1) return y;
            throw new IndexOutOfRangeException("Индекс должен быть 0 или 1.");
        }
    }

    public static Point operator ++(Point p)
    {
        return new Point(p.x + 1, p.y + 1);
    }

    public static Point operator --(Point p)
    {
        return new Point(p.x - 1, p.y - 1);
    }

    public static bool operator true(Point p)
    {
        return p.x == p.y;
    }

    public static bool operator false(Point p)
    {
        return p.x != p.y;
    }

    public static Point operator +(Point p, int scalar)
    {
        return new Point(p.x + scalar, p.y + scalar);
    }

    public static Point operator -(Point p, int scalar)
    {
        return new Point(p.x - scalar, p.y - scalar);
    }
}


public class Program
{
    public static void Main()
    {
        Point p1 = new Point(3, 4);
        p1.Display();
        Console.WriteLine($"Расстояние от начала координат: {p1.DistanceFromOrigin()}");

        p1.Move(1, -1);
        p1.Display();

        if (p1)
            Console.WriteLine("Координаты равны.");
        else
            Console.WriteLine("Координаты не равны.");

        Point p2 = p1 + 5;
        p2.Display();
    }
}

*/




                                                                                            //Practica 5//
/*
public class GenericClass<T>
{
    private T _field;

    public T Property
    {
        get { return _field; }
        set { _field = value; }
    }

    public GenericClass(T initialValue)
    {
        _field = initialValue;
    }
}

public class Program
{
    public static void Main()
    {
        var intInstance = new GenericClass<int>(10);
        Console.WriteLine("Initial value: " + intInstance.Property);
        intInstance.Property = 20;
        Console.WriteLine("Updated value: " + intInstance.Property);

        var stringInstance = new GenericClass<string>("Hello");
        Console.WriteLine("Initial value: " + stringInstance.Property);
        stringInstance.Property = "Andrey";
        Console.WriteLine("Updated value: " + stringInstance.Property);
    }
}
*/






/*
public class Program
{
    public static T GetMaxElement<T>(T[] array) where T : IComparable<T>
    {
        if (array == null || array.Length == 0)
            throw new ArgumentException("Array is null or empty");

        T maxElement = array[0];
        foreach (var element in array)
        {
            if (element.CompareTo(maxElement) > 0)
            {
                maxElement = element;
            }
        }
        return maxElement;
    }

    public static void Main()
    {
        int[] intArray = { 15, 45, 300, 69, 228 };
        Console.WriteLine("Max int: " + GetMaxElement(intArray));

        string[] stringArray = { "apple", "orange", "banana" };
        Console.WriteLine("Max string: " + GetMaxElement(stringArray));
    }
}
*/


/*
public class GenericArray<T>
{
    public T[] Array { get; private set; }

    public GenericArray(T[] array)
    {
        Array = array;
    }

    public static GenericArray<T> operator +(GenericArray<T> first, GenericArray<T> second)
    {
        if (first == null || second == null)
            throw new ArgumentNullException("One of the arrays is null");

        T[] combinedArray = new T[first.Array.Length + second.Array.Length];
        first.Array.CopyTo(combinedArray, 0);
        second.Array.CopyTo(combinedArray, first.Array.Length);

        return new GenericArray<T>(combinedArray);
    }

    public void Print()
    {
        Console.WriteLine(string.Join(", ", Array));
    }
}

public class Program
{
    public static void Main()
    {
        var intArray1 = new GenericArray<int>(new int[] { 15, 25, 35 });
        var intArray2 = new GenericArray<int>(new int[] { 45, 55 });

        var resultArray = intArray1 + intArray2;
        resultArray.Print(); 
    }
}
*/

/*
public class GenericArray<T>
{
    private T[] array;

    public GenericArray()
    {
        array = new T[0];
    }

    public void Add(T item)
    {
        T[] newArray = new T[array.Length + 1];
        array.CopyTo(newArray, 0);
        newArray[array.Length] = item;
        array = newArray;
    }

    public void Remove(int index)
    {
        if (index < 0 || index >= array.Length)
            throw new ArgumentOutOfRangeException("Index out of range");

        T[] newArray = new T[array.Length - 1];
        for (int i = 0, j = 0; i < array.Length; i++)
        {
            if (i != index)
            {
                newArray[j++] = array[i];
            }
        }
        array = newArray;
    }

    public T Get(int index)
    {
        if (index < 0 || index >= array.Length)
            throw new ArgumentOutOfRangeException("Index out of range");
        return array[index];
    }

    public int Length => array.Length;
}

public class Program
{
    public static void Main()
    {
        var genericArray = new GenericArray<string>();
        genericArray.Add("Hello");
        genericArray.Add("Maksim");
        Console.WriteLine(genericArray.Get(0));
        Console.WriteLine(genericArray.Length);  

        genericArray.Remove(0);
        Console.WriteLine(genericArray.Get(0)); 
        Console.WriteLine(genericArray.Length);   
    }
}
*/










/*                                                                                                                //Practica 6//
class Program
{
    static void Main()
    {
        try
        {
            Console.Write("Введите коэффициент A: ");
            int A = Convert.ToInt32(Console.ReadLine());

            Console.Write("Введите коэффициент B: ");
            int B = Convert.ToInt32(Console.ReadLine());

            if (A == 0 && B == 0)
            {
                Console.WriteLine("Решение существует: любое целое число x является решением.");
            }
            else if (A == 0)
            {
                Console.WriteLine("Нет решений: A равно 0, B не равно 0.");
            }
            else if (B % A == 0)
            {
                int x = B / A;
                Console.WriteLine($"Решение: x = {x}.");
            }
            else
            {
                Console.WriteLine("Нет решений: B не делится на A без остатка.");
            }
        }
        catch (FormatException)
        {
            Console.WriteLine("Ошибка: вводите целые числа.");
        }
        catch (OverflowException)
        {
            Console.WriteLine("Ошибка: введено слишком большое число.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Неизвестная ошибка: {ex.Message}");
        }
    }
}
*/






/*
class Program
{
    static void Main()
    {
        while (true)
        {
            Console.Write("Введите целое число (или любой другой символ для выхода): ");
            string input = Console.ReadLine();

            if (!int.TryParse(input, out int number))
                break;

            try
            {
                CheckNumber(number);
            }
            catch (OverflowException)
            {
                Console.WriteLine("Нечетное число.");
            }
            catch (ArithmeticException)
            {
                Console.WriteLine("Четное число.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Неизвестная ошибка: {ex.Message}");
            }
        }
    }

    static void CheckNumber(int number)
    {
        if (number % 2 == 0)
            throw new ArithmeticException();
        else
            throw new OverflowException();
    }
}
*/




/*
class CustomException : Exception
{
    public char[] CharArray { get; }

    public CustomException(int size) : base("Исключение пользовательского типа")
    {
        CharArray = new char[size];
        for (int i = 0; i < size; i++)
        {
            CharArray[i] = (char)('A' + i);
        }
    }
}

class Program
{
    static void Main()
    {
        try
        {
          
            throw new CustomException(26); 
        }
        catch (CustomException ex)
        {
          
            Console.WriteLine("Содержимое массива:");
            Console.WriteLine(string.Join(", ", ex.CharArray));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Неизвестная ошибка: {ex.Message}");
        }
    }
}
*/

                                                                                                //Practica 8//


/*
class Animal
{
    public virtual void Speak() => Console.WriteLine("Animal speaks");
}

class Dog : Animal
{
    public override void Speak() => Console.WriteLine("Bark");
}

class Cat : Animal
{
    public override void Speak() => Console.WriteLine("Meow");
}

class Program
{
    // Ковариантный делегат
    public delegate T AnimalFunc<out T>();

    // Контравариантный делегат
    public delegate void AnimalAction<in T>(T animal);

    static void Main()
    {
        // Ковариантность
        AnimalFunc<Animal> getDog = () => new Dog();
        Animal dog = getDog(); // Возвращаем Dog как Animal
        dog.Speak();

        // Контравариантность
        AnimalAction<Animal> actAnimal = animal => animal.Speak();
        AnimalAction<Dog> actDog = actAnimal; // Присваиваем с явным преобразованием
        actDog(new Dog()); // Вызываем метод с Dog
    }
}
*/

/*
class Animal
{
    public virtual void Speak() => Console.WriteLine("Animal speaks");
}

class Dog : Animal
{
    public override void Speak() => Console.WriteLine("Bark");
}

class Cat : Animal
{
    public override void Speak() => Console.WriteLine("Meow");
}

class Program
{
    public delegate T AnimalProducer<out T>();
    public delegate void AnimalAction<in T>(T a);

    public delegate void AnimalHandler<in T>(T animal);

    static void Main()
    {
        List<Animal> zooAnimals = new List<Animal> { new Dog(), new Cat() };

        AnimalProducer<Animal> getAnimal = () => new Dog();
        Animal animalInstance = getAnimal();
        animalInstance.Speak();

        AnimalAction<Animal> actAnimal = a => a.Speak();
        AnimalAction<Dog> actDog = actAnimal;
        actDog(new Dog());

        AnimalHandler<Animal> handleAnimal = a => a.Speak();
        HandleAnimals(zooAnimals, handleAnimal);
    }

    static void HandleAnimals<T>(List<T> animals, AnimalHandler<T> handler)
    {
        foreach (var a in animals)
        {
            handler(a);
        }
    }
}
*/


                                                                                                                //Practica 9//


/*
abstract class BaseArray
{
    protected int[] array;

    public BaseArray(int size)
    {
        array = new int[size];
    }

    public int Size => array.Length;

    public abstract void Display();

    public int this[int index]
    {
        get => array[index];
        set => array[index] = value;
    }
}

class DerivedArray : BaseArray
{
    public DerivedArray(int size) : base(size) { }

    public override void Display()
    {
        Console.WriteLine("Array contents:");
        for (int i = 0; i < Size; i++)
        {
            Console.Write(array[i] + " ");
        }
        Console.WriteLine();
    }
}

class Program
{
    static void Main()
    {
        DerivedArray myArray = new DerivedArray(5);
        for (int i = 0; i < myArray.Size; i++)
        {
            myArray[i] = i * 10; // Присваиваем значения
        }

        myArray.Display(); // Отображаем содержимое 
    }
}
*/





/*
interface ICalculator
{
    int Calculate(int multiplier);
}

abstract class BaseClass
{
    protected int field1;
    protected int field2;

    public BaseClass(int value1, int value2)
    {
        field1 = value1;
        field2 = value2;
    }

    public abstract int this[int index] { get; set; }
}

class DerivedClass : BaseClass, ICalculator
{
    public DerivedClass(int value1, int value2) : base(value1, value2) { }

    public override int this[int index]
    {
        get => index % 2 == 0 ? field1 : field2;
        set
        {
            if (index % 2 == 0)
                field1 = value;
            else
                field2 = value;
        }
    }

    public int Calculate(int multiplier)
    {
        return (field1 + field2) * multiplier;
    }
}

class Program
{
    static void Main()
    {
        DerivedClass obj = new DerivedClass(5, 10);

        // Пример использования индексатора
        Console.WriteLine(obj[0]); 
        Console.WriteLine(obj[1]); 

        // Пример использования метода
        int result = obj.Calculate(2);
        Console.WriteLine(result); 
    }
}
*/



/*
abstract class BaseClass
{
    public abstract int Property { get; set; }
    
    public abstract int this[int index] { get; set; }
    
    public abstract void Display();
}

interface IProperty
{
    int Property { get; set; }
}

interface IIndexer
{
    int this[int index] { get; set; }
}

class DerivedClass : BaseClass, IProperty, IIndexer
{
    private int _value;
    private int[] _array = new int[5];

    public override int Property
    {
        get => _value;
        set => _value = value;
    }

    public override int this[int index]
    {
        get => _array[index];
        set => _array[index] = value;
    }

    public override void Display()
    {
        Console.WriteLine($"Property: {Property}");
        for (int i = 0; i < _array.Length; i++)
        {
            Console.WriteLine($"Index {i}: {_array[i]}");
        }
    }

    int IProperty.Property
    {
        get => Property;
        set => Property = value;
    }

    int IIndexer.this[int index]
    {
        get => this[index];
        set => this[index] = value;
    }
}

class Program
{
    static void Main()
    {
        DerivedClass obj = new DerivedClass();
        
        obj.Property = 10;
        for (int i = 0; i < 5; i++)
        {
            obj[i] = i * 2;
        }

        obj.Display();

        IProperty propInterface = obj;
        propInterface.Property = 20;
        IIndexer indexerInterface = obj;
        indexerInterface[0] = 111;

        Console.WriteLine("\nThrough interface:");
        Console.WriteLine($"Property: {propInterface.Property}");
        Console.WriteLine($"Index 0: {indexerInterface[0]}");
    }
}
*/


                                                                                //Practica 11//
/* Задание 1 и 2
class Футболист
{
    public string Имя { get; set; }
    public int Номер { get; set; }

    public Футболист(string имя, int номер)
    {
        Имя = имя;
        Номер = номер;
    }

    public override string ToString()
    {
        return $"{Имя} (номер {Номер})";
    }
}

class ФутбольнаяКоманда
{
    private Футболист[] футболисты = new Футболист[11];

    public Футболист this[int index]
    {
        get
        {
            if (index < 0 || index >= футболисты.Length) return null; // Возвращаем null вместо исключения
            return футболисты[index];
        }
        set
        {
            if (index >= 0 && index < футболисты.Length)
                футболисты[index] = value;
        }
    }
}

class Program
{
    static void Main()
    {
        ФутбольнаяКоманда команда = new ФутбольнаяКоманда();
        команда[0] = new Футболист("Игрок 1", 10);
        команда[1] = new Футболист("Игрок 2", 9);

        for (int i = 0; i < 12; i++) // Попытка доступа к 12 индексам
        {
            var игрок = команда[i];
            if (игрок != null)
                Console.WriteLine(игрок);
            else
                Console.WriteLine($"Игрок с индексом {i} отсутствует.");
        }
    }
}
*/


/* Задание 3
class Word
{
    public string Source { get; }
    public string Target { get; set; }

    public Word(string source, string target)
    {
        Source = source;
        Target = target;
    }
}

class Dictionary
{
    private Word[] words;

    public Dictionary()
    {
        words = new Word[]
        {
            new Word("red", "красный"),
            new Word("blue", "синий"),
            new Word("green", "зеленый")
        };
    }

    public string this[string source]
    {
        get
        {
            foreach (var word in words)
            {
                if (word.Source.Equals(source, StringComparison.OrdinalIgnoreCase))
                {
                    return word.Target;
                }
            }
            return null; 
        }
        set
        {
            for (int i = 0; i < words.Length; i++)
            {
                if (words[i].Source.Equals(source, StringComparison.OrdinalIgnoreCase))
                {
                    words[i].Target = value; 
                    return;
                }
            }
       
            Array.Resize(ref words, words.Length + 1);
            words[words.Length - 1] = new Word(source, value);
        }
    }
}

class Program
{
    static void Main()
    {
        Dictionary dictionary = new Dictionary();

        Console.WriteLine(dictionary["red"]); 

        dictionary["red"] = "алый";
        Console.WriteLine(dictionary["red"]); 

        dictionary["yellow"] = "желтый";
        Console.WriteLine(dictionary["yellow"]);
    }
}
*/






/* Задание 4
class CyclicArray
{
    private int[] numbers;
    private int currentIndex;

    public CyclicArray(int[] initialValues)
    {
        numbers = initialValues;
        currentIndex = 0;
    }

    public int CurrentValue
    {
        get
        {
            return numbers[currentIndex];
        }
        set
        {
            numbers[currentIndex] = value;
            currentIndex = (currentIndex + 1) % numbers.Length;
        }
    }

    public void PrintArray()
    {
        Console.WriteLine("Array values:");
        foreach (var number in numbers)
        {
            Console.WriteLine(number);
        }
    }
}

class Program
{
    static void Main()
    {
        CyclicArray cyclicArray = new CyclicArray(new int[] { 10, 20, 30, 40 });

       
        Console.WriteLine(cyclicArray.CurrentValue); 

       
        cyclicArray.CurrentValue = 99;
        Console.WriteLine(cyclicArray.CurrentValue); 

        cyclicArray.CurrentValue = 88;
        Console.WriteLine(cyclicArray.CurrentValue); 

        cyclicArray.CurrentValue = 77;
        Console.WriteLine(cyclicArray.CurrentValue);

        cyclicArray.CurrentValue = 66;
        Console.WriteLine(cyclicArray.CurrentValue); 

       
        cyclicArray.PrintArray();
    }
}
*/





/* Задание 6
public class CustomNumber
{
    private int number;

    public CustomNumber()
    {
        number = 0;
    }

    public int this[int index]
    {
        set
        {
            int digit = value % 10;
            if (index < 0) throw new IndexOutOfRangeException("Индекс должен быть неотрицательным");
            number = SetDigitAtPosition(number, index, digit);
        }
    }

    private int SetDigitAtPosition(int num, int position, int digit)
    {
        int factor = (int)Math.Pow(10, position);
        int higherPart = num / (factor * 10);
        int lowerPart = num % factor;
        return higherPart * (factor * 10) + digit * factor + lowerPart;
    }

    public override string ToString()
    {
        return number.ToString();
    }
}

// Пример использования:
public class Program
{
    public static void Main()
    {
        CustomNumber customNumber = new CustomNumber();
        customNumber[0] = 5; // 5
        customNumber[1] = 8; // 85
        customNumber[2] = 3; // 385
        Console.WriteLine(customNumber); // Вывод: 385
    }
}
*/

/* Задание 6
public class TextArray
{
    private string[] texts;

    public TextArray(string[] initialTexts)
    {
        texts = initialTexts;
    }

    public string this[int index]
    {
        get => texts[index % texts.Length];
        set => texts[index % texts.Length] = value;
    }

    public char this[int i, int j]
    {
        get
        {
            int textIndex = i % texts.Length;
            return texts[textIndex][j % texts[textIndex].Length];
        }
    }

    public override string ToString()
    {
        return string.Join(", ", texts);
    }
}


public class Program
{
    public static void Main()
    {
        TextArray textArray = new TextArray(new string[] { "Hello", "World", "CSharp" });
        textArray[1] = "Everyone";
        Console.WriteLine(textArray);

       
        Console.WriteLine(textArray[0, 1]);
        Console.WriteLine(textArray[2, 3]); 
        Console.WriteLine(textArray[3, 0]); 
    }
}
*/
                                                                                                                    //Practica 12//

//задание 1//
/*
class Program
{
    static void Main()
    {
   
        ArrayList arrayList = new ArrayList { 1.1, 2.2, 3.3 };

        foreach (double value in arrayList)
        {
            Console.WriteLine(value);
        }

        arrayList.Remove(2.2);
        Console.WriteLine("После удаления:");
        foreach (double value in arrayList)
        {
            Console.WriteLine(value);
        }

       
        Queue<double> queue = new Queue<double>();
        queue.Enqueue(1.1);
        queue.Enqueue(2.2);
        queue.Enqueue(3.3);

        Console.WriteLine($"Удалено из очереди: {queue.Dequeue()}");
        foreach (double value in queue)
        {
            Console.WriteLine(value);
        }

        Hashtable hashtable = new Hashtable
        {
            ["first"] = 1.1,
            ["second"] = 2.2,
            ["third"] = 3.3
        };

        foreach (DictionaryEntry entry in hashtable)
        {
            Console.WriteLine($"Ключ: {entry.Key}, Значение: {entry.Value}");
        }

        hashtable.Remove("second");
        Console.WriteLine("После удаления:");
        foreach (DictionaryEntry entry in hashtable)
        {
            Console.WriteLine($"Ключ: {entry.Key}, Значение: {entry.Value}");
        }
    }
}
*/
//задание 2//
/*
class Program
{
    static void Main()
    {
        try
        {
           
            ArrayList arrayList = new ArrayList { 1.1, 2.2, 3.3 };
            PrintArrayList(arrayList);
            arrayList.Remove(2.2);
            Console.WriteLine("После удаления:");
            PrintArrayList(arrayList);
        }
        catch (ArgumentNullException e)
        {
            Console.WriteLine($"Ошибка: {e.Message}");
        }
        catch (InvalidCastException e)
        {
            Console.WriteLine($"Ошибка: {e.Message}");
        }

        try
        {
           
            Queue<double> queue = new Queue<double>();
            queue.Enqueue(1.1);
            queue.Enqueue(2.2);
            queue.Enqueue(3.3);
            Console.WriteLine($"Удалено из очереди: {queue.Dequeue()}");
        }
        catch (InvalidOperationException e)
        {
            Console.WriteLine($"Ошибка: {e.Message}");
        }

        try
        {
            
            Hashtable hashtable = new Hashtable
            {
                ["first"] = 1.1,
                ["second"] = 2.2,
                ["third"] = 3.3
            };
            PrintHashtable(hashtable);
            hashtable.Remove("second");
            Console.WriteLine("После удаления:");
            PrintHashtable(hashtable);
        }
        catch (ArgumentException e)
        {
            Console.WriteLine($"Ошибка: {e.Message}");
        }
    }

    static void PrintArrayList(ArrayList arrayList)
    {
        foreach (double value in arrayList)
        {
            Console.WriteLine(value);
        }
    }

    static void PrintHashtable(Hashtable hashtable)
    {
        foreach (DictionaryEntry entry in hashtable)
        {
            Console.WriteLine($"Ключ: {entry.Key}, Значение: {entry.Value}");
        }
    }
}
*/
//задание 3//
/*
class Program
{
    static void Main()
    {
        ArrayList arrayList = new ArrayList { 1.1, 2.2, 3.3, 0.5, 4.0 };
        Console.WriteLine("Исходные значения:");
        PrintArrayList(arrayList);

        CalculateAverageAndModify(ref arrayList);

        Console.WriteLine("После обработки:");
        PrintArrayList(arrayList);
    }

    static void CalculateAverageAndModify(ref ArrayList arrayList)
    {
        double sum = 0;
        int count = 0;

        foreach (object obj in arrayList)
        {
            if (obj is double value)
            {
                sum += value;
                count++;
            }
        }

        double average = sum / count;
        Console.WriteLine($"Среднее арифметическое: {average}");
        for (int i = 0; i < arrayList.Count; i++)
        {
            if

(arrayList[i

] is double item && item < average)
            {
                arrayList[i] = 0; 
            }
        }
    }

    static void PrintArrayList(ArrayList arrayList)
    {
        foreach (object obj in arrayList)
        {
            Console.WriteLine(obj);
        }
    }
}
*/

//Задание 4//
/*
class Program
{
    static void Main()
    {
        Console.Write("Введите скобочную структуру: ");
        string input = Console.ReadLine();

        if (IsValidBracketSequence(input))
        {
            Console.WriteLine("Скобочная структура правильная.");
        }
        else
        {
            Console.WriteLine("Скобочная структура неправильная.");
        }
    }

    static bool IsValidBracketSequence(string input)
    {
        Stack stack = new Stack();

        foreach (char ch in input)
        {
            if (ch == '(')
            {
                stack.Push(ch);
            }
            else if (ch == ')')
            {
                if (stack.Count == 0)
                {
                    return false; 
                }
                stack.Pop();
            }
        }

        return stack.Count == 0; 
    }
}
*/

//задание 5//
/*
class Student
{
    public string LastName;
    public string FirstName;
    public int Course;
    public int MathGrade;
    public int PhysicsGrade;
    public int ComputerScienceGrade;

    public double AverageGrade()
    {
        return (MathGrade + PhysicsGrade + ComputerScienceGrade) / 3.0;
    }
}

class Program
{
    static void Main()
    {
        
        Student[] studentsArray = new Student[6]
        {
            new Student { LastName = "Иванов", FirstName = "Иван", Course = 2, MathGrade = 3, PhysicsGrade = 4, ComputerScienceGrade = 3 },
            new Student { LastName = "Петров", FirstName = "Петр", Course = 2, MathGrade = 2, PhysicsGrade = 3, ComputerScienceGrade = 4 },
            new Student { LastName = "Сидоров", FirstName = "Сидор", Course = 1, MathGrade = 5, PhysicsGrade = 5, ComputerScienceGrade = 5 },
            new Student { LastName = "Федоров", FirstName = "Федор", Course = 2, MathGrade = 3, PhysicsGrade = 2, ComputerScienceGrade = 4 },
            new Student { LastName = "Кузнецов", FirstName = "Алексей", Course = 3, MathGrade = 4, PhysicsGrade = 5, ComputerScienceGrade = 4 },
            new Student { LastName = "Смирнов", FirstName = "Смирно", Course = 2, MathGrade = 5, PhysicsGrade = 5, ComputerScienceGrade = 5 }
        };

        string worstStudentArray = FindWorstStudent(studentsArray);
        Console.WriteLine($"Студент 2-го курса с худшими оценками (массив): {worstStudentArray}");

        
        Queue<Student> studentsQueue = new Queue<Student>();
        studentsQueue.Enqueue(new Student { LastName = "Иванов", FirstName = "Иван", Course = 2, MathGrade = 3, PhysicsGrade = 4, ComputerScienceGrade = 3 });
        studentsQueue.Enqueue(new Student { LastName = "Петров", FirstName = "Петр", Course = 2, MathGrade = 2, PhysicsGrade = 3, ComputerScienceGrade = 4 });
        studentsQueue.Enqueue(new Student { LastName = "Сидоров", FirstName = "Сидор", Course = 1, MathGrade = 5, PhysicsGrade = 5, ComputerScienceGrade = 5 });
        studentsQueue.Enqueue(new Student { LastName = "Федоров", FirstName = "Федор", Course = 2, MathGrade = 3, PhysicsGrade = 2, ComputerScienceGrade = 4 });
        studentsQueue.Enqueue(new Student { LastName = "Кузнецов", FirstName = "Алексей", Course = 3, MathGrade = 4, PhysicsGrade = 5, ComputerScienceGrade = 4 });
        studentsQueue.Enqueue(new Student { LastName = "Смирнов", FirstName = "Смирно", Course = 2, MathGrade = 5, PhysicsGrade = 5, ComputerScienceGrade = 5 });

        string worstStudentQueue = FindWorstStudent(studentsQueue);
        Console.WriteLine($"Студент 2-го курса с худшими оценками (очередь): {worstStudentQueue}");
    }

    static string FindWorstStudent(Student[] students)
    {
        string worstStudent = "";
        double worstAverage = double.MaxValue;
        foreach (var student in students)
        {
            if (student.Course == 2)
            {

double average = student.AverageGrade();
                if (average < worstAverage)
                {
                    worstAverage = average;
                    worstStudent = $"{student.LastName} {student.FirstName}";
                }
            }
        }
        return worstStudent;
    }

    static string FindWorstStudent(Queue<Student> students)
    {
        string worstStudent = "";
        double worstAverage = double.MaxValue;

        foreach (var student in students)
        {
            if (student.Course == 2)
            {
                double average = student.AverageGrade();
                if (average < worstAverage)
                {
                    worstAverage = average;

                    worstStudent = $"{student.LastName} {student.FirstName}";
                }
            }
        }
        return worstStudent;
    }
}
*/

//задание 6//

class Person
{
    public string Name { get; set; }
}

class Student : Person
{
    public int StudentId { get; set; }
}

class TestCollections<TKey, TValue>
    where TKey : Person, new()
    where TValue : Student, new()
{
    public Dictionary<TKey, TValue> Collection2 { get; set; }

    public TestCollections(int count)
    {
        Collection2 = new Dictionary<TKey, TValue>(count);
        for (int i = 0; i < count; i++)
        {
            TKey person = new TKey { Name = $"Имя {i + 1}" };
            TValue student = new TValue { StudentId = i + 1, Name = person.Name };

            
            if (!Collection2.ContainsKey(person))
            {
                Collection2[person] = student;
            }
        }
    }
}

class Program
{
    static void Main()
    {
        TestCollections<Person, Student> test = new TestCollections<Person, Student>(5);

       
        MeasureContainsValueTime(test.Collection2, null, "Не существующий элемент по значению");
    }

    static void MeasureContainsValueTime(Dictionary<Person, Student> dictionary, Student value, string itemName)
    {
        Stopwatch stopwatch = Stopwatch.StartNew();
        bool containsValue = dictionary.ContainsValue(value);
        stopwatch.Stop();
        Console.WriteLine($"{itemName}: {containsValue}, время: {stopwatch.ElapsedTicks} тактов");
    }
}



Работу выполнили Усенко Дмитрий(закрыл 5,6,8,9) (ИП-22) и Козин Андрей(закрыл 5,6,11,12) (ИП-21)



                                                                                                              //Практика 14//
using System;
using System.Text.RegularExpressions;
using System.Linq;
using System.Text;


public class TextProcessor
{
    public static void Main(string[] args)
    {
        // Устанавливаем кодировку вывода для корректного отображения кириллицы
        Console.OutputEncoding = System.Text.Encoding.UTF8;

        while (true)
        {
            Console.WriteLine("\n\n--- МЕНЮ ЗАДАНИЙ ---");
            Console.WriteLine("1. Удалить часть текста, заключенную в скобки.");
            Console.WriteLine("2. Сколько раз в тексте встречается заданное слово.");
            Console.WriteLine("3. В тексте вставить между словами вместо пробела запятую и пробел.");
            Console.WriteLine("4. Определить, какой процент слов в тексте начинается на букву К.");
            Console.WriteLine("5. Исключить из символьной строки все цифры.");
            Console.WriteLine("6. Определить, содержит ли текст символы, отличные от букв и пробела.");
            Console.WriteLine("7. Удалить буквы с ASCII-кодами от 70 до 75.");
            Console.WriteLine("8. Определить, имеются ли две подряд идущие '4'.");
            Console.WriteLine("9. Вставить пробел после каждой цифры.");
            Console.WriteLine("10. Увеличить каждую цифру на 1 (9 заменить на 0).");
            Console.WriteLine("11. Расположить сначала цифры, потом буквы.");
            Console.WriteLine("12. Преобразовать маленькие латинские буквы в большие.");
            Console.WriteLine("13. Зашифровать слово (циклический сдвиг на 1 позицию).");
            Console.WriteLine("14. Вывести строку цифр, расположив в каждой подстроке по 5 цифр.");
            Console.WriteLine("15. Увеличить ASCII-коды букв на 3.");
            Console.WriteLine("16. Подсчитать сумму цифр, кратных 3, в 3 строках.");
            Console.WriteLine("17. Подсчитать сумму цифр в 2 строках.");
            Console.WriteLine("18. Подсчитать количество символов с ASCII-кодом >=70.");
            Console.WriteLine("19. Добавить справа заданное количество символов.");
            Console.WriteLine("20. Удалить пробелы из строки.");
            Console.WriteLine("21. Вывести слово в зеркальном отображении.");
            Console.WriteLine("22. Разбить текст на строки по k символов.");
            Console.WriteLine("23. Вставить k пробелов через каждые n символов.");
            Console.WriteLine("24. Заменить слово А1 на слово А2.");
            Console.WriteLine("25. Заменить один символ другим.");
            Console.WriteLine("26. Убрать лишние пробелы между словами.");
            Console.WriteLine("27. Зашифровать 3 строки, заменив 'с' на 'о'.");
            Console.WriteLine("28. Преобразовать 3 строки: после каждой цифры добавить '!'.");
            Console.WriteLine("29. Заменить все пробелы на символ '_'.");
            Console.WriteLine("30. Удалить буквы 'р' и 'с' из предложения.");
            Console.WriteLine("0. Выход из программы.");
            Console.Write("Введите номер задания: ");

            string choice = Console.ReadLine();

            if (choice == "0")
            {
                Console.WriteLine("Завершение работы программы.");
                break;
            }

            string inputText; // Для большинства заданий потребуется исходный текст
            switch (choice)
            {
                case "1":
                    Console.Write("Введите исходный текст: ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 1: Удаление текста в скобках ---");
                    string result1 = RemoveTextInParentheses(inputText);
                    Console.WriteLine("Исходный текст: " + inputText);
                    Console.WriteLine("Результат: " + result1);
                    break;

                case "2":
                    Console.Write("Введите исходный текст: ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 2: Подсчет вхождений слова ---");
                    Console.Write("Введите слово для поиска: ");
                    string wordToCount = Console.ReadLine();
                    int count = CountWordOccurrences(inputText, wordToCount);
                    Console.WriteLine("Исходный текст: " + inputText);
                    Console.WriteLine($"Слово '{wordToCount}' встречается в тексте {count} раз.");
                    break;

                case "3":
                    Console.Write("Введите исходный текст: ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 3: Замена пробелов на запятые и пробелы ---");
                    string result3 = ReplaceSpacesWithCommaAndSpace(inputText);
                    Console.WriteLine("Исходный текст: " + inputText);
                    Console.WriteLine("Результат: " + result3);
                    break;

                case "4":
                    Console.Write("Введите исходный текст: ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 4: Процент слов, начинающихся на букву 'К' ---");
                    double percentage = PercentageWordsStartingWithK(inputText);
                    Console.WriteLine("Исходный текст: " + inputText);
                    Console.WriteLine($"Процент слов, начинающихся на 'К' (или 'к'): {percentage:F2}%");
                    break;

                case "5":
                    Console.Write("Введите исходный текст: ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 5: Исключение цифр из строки ---");
                    string result5 = RemoveDigits(inputText);
                    Console.WriteLine("Исходный текст: " + inputText);
                    Console.WriteLine("Результат: " + result5);
                    break;

                case "6":
                    Console.Write("Введите исходный текст: ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 6: Проверка на небуквенные/непробельные символы ---");
                    bool containsOtherChars = ContainsNonLettersOrSpaces(inputText);
                    Console.WriteLine("Исходный текст: " + inputText);
                    Console.WriteLine($"Содержит ли текст символы, отличные от букв и пробела: {containsOtherChars}");
                    break;

                case "7":
                    Console.Write("Введите исходный текст: ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 7: Удаление букв с ASCII-кодами 70-75 ---");
                    string result7 = RemoveCharsByAsciiRange(inputText, 70, 75);
                    Console.WriteLine("Исходный текст: " + inputText);
                    Console.WriteLine("Результат: " + result7);
                    break;

                case "8":
                    Console.Write("Введите исходный текст: ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 8: Проверка на '44' ---");
                    bool containsDoubleFour = ContainsDoubleFour(inputText);
                    Console.WriteLine("Исходный текст: " + inputText);
                    Console.WriteLine($"Содержит ли строка две подряд '4': {containsDoubleFour}");
                    break;

                case "9":
                    Console.Write("Введите исходный текст (буквы и цифры): ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 9: Вставка пробела после каждой цифры ---");
                    string result9 = InsertSpaceAfterDigits(inputText);
                    Console.WriteLine("Исходный текст: " + inputText);
                    Console.WriteLine("Результат: " + result9);
                    break;

                case "10":
                    Console.Write("Введите исходный текст (с цифрами): ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 10: Увеличение цифр на 1 (9->0) ---");
                    string result10 = IncrementDigits(inputText);
                    Console.WriteLine("Исходный текст: " + inputText);
                    Console.WriteLine("Результат: " + result10);
                    break;

                case "11":
                    Console.Write("Введите исходный текст (с цифрами и буквами): ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 11: Сортировка: цифры, затем буквы ---");
                    string result11 = SortDigitsThenLetters(inputText);
                    Console.WriteLine("Исходный текст: " + inputText);
                    Console.WriteLine("Результат: " + result11);
                    break;

                case "12":
                    Console.Write("Введите строку маленьких латинских букв: ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 12: Преобразование маленьких букв в большие ---");
                    string result12 = inputText.ToUpperInvariant();
                    Console.WriteLine("Исходный текст: " + inputText);
                    Console.WriteLine("Результат: " + result12);
                    break;

                case "13":
                    Console.Write("Введите слово для шифрования: ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 13: Зашифровка слова (циклический сдвиг) ---");
                    string result13 = EncryptWordCyclicShift(inputText);
                    Console.WriteLine("Исходное слово: " + inputText);
                    Console.WriteLine("Зашифрованное слово: " + result13);
                    break;

                case "14":
                    Console.Write("Введите строку цифр: ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 14: Вывод цифр по 5 в подстроке ---");
                    Console.WriteLine("Исходная строка: " + inputText);
                    DisplayDigitsInSubstrings(inputText, 5);
                    break;

                case "15":
                    Console.Write("Введите строку: ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 15: Увеличение ASCII-кодов букв на 3 ---");
                    string result15 = IncrementLetterAsciiByThree(inputText);
                    Console.WriteLine("Исходный текст: " + inputText);
                    Console.WriteLine("Результат: " + result15);
                    break;

                case "16":
                    Console.WriteLine("\n--- Задание 16: Сумма цифр, кратных 3, в 3 строках ---");
                    for (int i = 1; i <= 3; i++)
                    {
                        Console.Write($"Введите строку {i}: ");
                        inputText = Console.ReadLine();
                        int sum = SumDigitsDivisibleByThree(inputText);
                        Console.WriteLine($"Сумма цифр, кратных 3, в строке {i}: {sum}");
                    }
                    break;

                case "17":
                    Console.WriteLine("\n--- Задание 17: Сумма цифр в 2 строках ---");
                    for (int i = 1; i <= 2; i++)
                    {
                        Console.Write($"Введите строку {i}: ");
                        inputText = Console.ReadLine();
                        int sum = SumDigitsInString(inputText);
                        Console.WriteLine($"Сумма цифр в строке {i}: {sum}");
                    }
                    break;

                case "18":
                    Console.Write("Введите строку: ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 18: Количество символов с ASCII >= 70 ---");
                    int countAscii70 = CountCharsWithAsciiGreaterThanOrEqualTo70(inputText);
                    Console.WriteLine($"Количество символов с ASCII-кодом >=70: {countAscii70}");
                    break;

                case "19":
                    Console.Write("Введите исходную строку: ");
                    string originalString19 = Console.ReadLine(); // Используем отдельную переменную для "исходной"
                    Console.Write("Введите символ для добавления: ");
                    char charToAdd = Console.ReadKey().KeyChar;
                    Console.WriteLine(); // Переход на новую строку после ReadKey
                    Console.Write("Введите количество символов для добавления: ");
                    if (!int.TryParse(Console.ReadLine(), out int numToAdd))
                    {
                        Console.WriteLine("Некорректное количество.");
                        break;
                    }
                    Console.WriteLine("\n--- Задание 19: Добавление символов справа ---");
                    string modifiedString19 = AddCharsRight(originalString19, charToAdd, numToAdd);
                    Console.WriteLine("Исходная строка: " + originalString19);
                    Console.WriteLine("Результат: " + modifiedString19);
                    break;

                case "20":
                    Console.Write("Введите строку с пробелами: ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 20: Удаление пробелов из строки ---");
                    string result20 = RemoveSpaces(inputText);
                    Console.WriteLine("Исходная строка: " + inputText);
                    Console.WriteLine("Результат: " + result20);
                    break;

                case "21":
                    Console.Write("Введите слово: ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 21: Зеркальное отображение слова ---");
                    string result21 = ReverseString(inputText);
                    Console.WriteLine("Исходное слово: " + inputText);
                    Console.WriteLine("Зеркальное отображение: " + result21);
                    break;

                case "22":
                    Console.Write("Введите текст: ");
                    inputText = Console.ReadLine();
                    Console.Write("Введите количество символов (k) для разбиения: ");
                    if (!int.TryParse(Console.ReadLine(), out int k22) || k22 <= 0)
                    {
                        Console.WriteLine("Некорректное значение k.");
                        break;
                    }
                    Console.WriteLine("\n--- Задание 22: Разбиение текста на строки по k символов ---");
                    Console.WriteLine("Исходный текст:\n" + inputText);
                    Console.WriteLine("Разбитый текст:");
                    SplitTextIntoLines(inputText, k22);
                    break;

                case "23":
                    Console.Write("Введите строку: ");
                    inputText = Console.ReadLine();
                    Console.Write("Введите n (интервал): ");
                    if (!int.TryParse(Console.ReadLine(), out int n23) || n23 <= 0)
                    {
                        Console.WriteLine("Некорректное значение n.");
                        break;
                    }
                    Console.Write("Введите k (количество пробелов для вставки): ");
                    if (!int.TryParse(Console.ReadLine(), out int k23) || k23 < 0)
                    {
                        Console.WriteLine("Некорректное значение k.");
                        break;
                    }
                    Console.WriteLine("\n--- Задание 23: Вставка пробелов через каждые n символов ---");
                    string result23 = InsertSpacesPeriodically(inputText, n23, k23);
                    Console.WriteLine("Исходная строка: " + inputText);
                    Console.WriteLine("Результат: " + result23);
                    break;

                case "24":
                    Console.Write("Введите текст: ");
                    inputText = Console.ReadLine();
                    Console.Write("Введите слово А1 для замены: ");
                    string wordA1 = Console.ReadLine();
                    Console.Write("Введите слово А2, на которое заменить: ");
                    string wordA2 = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 24: Замена слова А1 на А2 ---");
                    string result24 = ReplaceWord(inputText, wordA1, wordA2);
                    Console.WriteLine("Исходный текст: " + inputText);
                    Console.WriteLine($"Результат (заменено '{wordA1}' на '{wordA2}'): " + result24);
                    break;

                case "25":
                    Console.Write("Введите слово: ");
                    inputText = Console.ReadLine();
                    Console.Write("Введите символ для замены (старый): ");
                    char oldChar = Console.ReadKey().KeyChar;
                    Console.WriteLine();
                    Console.Write("Введите символ, на который заменить (новый): ");
                    char newChar = Console.ReadKey().KeyChar;
                    Console.WriteLine();
                    Console.WriteLine("\n--- Задание 25: Замена одного символа другим ---");
                    string result25 = ReplaceChar(inputText, oldChar, newChar);
                    Console.WriteLine("Исходное слово: " + inputText);
                    Console.WriteLine($"Результат (заменено '{oldChar}' на '{newChar}'): " + result25);
                    break;

                case "26":
                    Console.Write("Введите текст с лишними пробелами: ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 26: Убрать лишние пробелы ---");
                    string result26 = RemoveExtraSpaces(inputText);
                    Console.WriteLine("Исходный текст: " + inputText);
                    Console.WriteLine("Результат: " + result26);
                    break;

                case "27":
                    Console.WriteLine("\n--- Задание 27: Зашифровка 3 строк ('с' на 'о') ---");
                    for (int i = 1; i <= 3; i++)
                    {
                        Console.Write($"Введите строку {i}: ");
                        inputText = Console.ReadLine();
                        string encryptedString = ReplaceChar(inputText, 'с', 'о'); // Используем ранее созданную функцию ReplaceChar
                        Console.WriteLine($"Строка {i} зашифрована: " + encryptedString);
                    }
                    break;

                case "28":
                    Console.WriteLine("\n--- Задание 28: Добавление '!' после каждой цифры в 3 строках ---");
                    for (int i = 1; i <= 3; i++)
                    {
                        Console.Write($"Введите строку {i}: ");
                        inputText = Console.ReadLine();
                        string transformedString = InsertSymbolAfterDigits(inputText, '!'); // Новая вспомогательная функция
                        Console.WriteLine($"Строка {i} преобразована: " + transformedString);
                    }
                    break;

                case "29":
                    Console.Write("Введите предложение: ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 29: Замена пробелов на '_' ---");
                    string result29 = ReplaceSpacesWithUnderscore(inputText);
                    Console.WriteLine("Исходное предложение: " + inputText);
                    Console.WriteLine("Результат: " + result29);
                    break;

                case "30":
                    Console.Write("Введите предложение: ");
                    inputText = Console.ReadLine();
                    Console.WriteLine("\n--- Задание 30: Удаление букв 'р' и 'с' ---");
                    string result30 = RemoveSpecificChars(inputText, 'р', 'с');
                    Console.WriteLine("Исходное предложение: " + inputText);
                    Console.WriteLine("Результат: " + result30);
                    break;

                default:
                    Console.WriteLine("Неверный выбор. Пожалуйста, введите номер задания от 0 до 30.");
                    break;
            }
        }
    }

    // --- Функции для заданий 1-5 (из предыдущего ответа) ---

    /// <summary>
    /// Удаляет часть текста, заключенную в скобки (вместе со скобками).
    /// </summary>
    public static string RemoveTextInParentheses(string text)
    {
        return Regex.Replace(text, @"\s*\([^)]*\)", "");
    }

    /// <summary>
    /// Подсчитывает, сколько раз в тексте встречается заданное слово (регистронезависимо).
    /// </summary>
    public static int CountWordOccurrences(string text, string word)
    {
        string normalizedText = Regex.Replace(text, @"[^\p{L}\p{N}\s]", "").ToLowerInvariant();
        string normalizedWord = word.ToLowerInvariant();
        string[] words = normalizedText.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
        return words.Count(w => w == normalizedWord);
    }

    /// <summary>
    /// Вставляет между словами запятую и пробел вместо одного пробела.
    /// </summary>
    public static string ReplaceSpacesWithCommaAndSpace(string text)
    {
        string[] words = text.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
        return string.Join(", ", words);
    }

    /// <summary>
    /// Определяет, какой процент слов в тексте начинается на букву К (регистронезависимо).
    /// </summary>
    public static double PercentageWordsStartingWithK(string text)
    {
        string[] rawWords = text.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
        int totalWords = 0;
        int wordsStartingWithK = 0;

        foreach (string rawWord in rawWords)
        {
            string cleanedWord = Regex.Replace(rawWord, @"[^\p{L}\p{N}]", "").ToLowerInvariant();
            if (!string.IsNullOrWhiteSpace(cleanedWord))
            {
                totalWords++;
                if (cleanedWord.StartsWith("к"))
                {
                    wordsStartingWithK++;
                }
            }
        }
        return totalWords == 0 ? 0.0 : (double)wordsStartingWithK / totalWords * 100;
    }

    /// <summary>
    /// Исключает из символьной строки все цифры.
    /// </summary>
    public static string RemoveDigits(string text)
    {
        return Regex.Replace(text, @"\d", "");
    }

    // --- Новые функции для заданий 6-30 ---

    /// <summary>
    /// 6. Определяет, содержит ли данный текст символы, отличные от букв и пробела.
    /// </summary>
    public static bool ContainsNonLettersOrSpaces(string text)
    {
        // Паттерн `[^a-zA-Z\s\p{L}]` ищет любой символ, который НЕ является
        // латинской буквой (a-z, A-Z), пробельным символом (\s) или любой буквой Unicode (\p{L}).
        return Regex.IsMatch(text, @"[^a-zA-Z\s\p{L}]");
    }

    /// <summary>
    /// 7. Преобразует введенную строку так, чтобы из нее были удалены буквы с ASCII - кодами от 70 до 75.
    /// </summary>
    public static string RemoveCharsByAsciiRange(string text, int minAscii, int maxAscii)
    {
        StringBuilder sb = new StringBuilder();
        foreach (char c in text)
        {
            int asciiCode = (int)c;
            // Пропускаем символы, если это буква и ее ASCII-код попадает в заданный диапазон
            if (char.IsLetter(c) && asciiCode >= minAscii && asciiCode <= maxAscii)
            {
                continue;
            }
            sb.Append(c);
        }
        return sb.ToString();
    }

    /// <summary>
    /// 8. Определяет, имеются ли во введенной строке следующие подряд две "4".
    /// </summary>
    public static bool ContainsDoubleFour(string text)
    {
        return text.Contains("44");
    }

    /// <summary>
    /// 9. Введенную строку букв и цифр преобразовать так, чтобы после каждой цифры следовал пробел.
    /// </summary>
    public static string InsertSpaceAfterDigits(string text)
    {
        // $1 - это обратная ссылка на первую захваченную группу, т.е. на найденную цифру
        return Regex.Replace(text, @"(\d)", "$1 ");
    }

    /// <summary>
    /// Вспомогательная функция для задания 28
    /// Преобразует строку, вставляя заданный символ после каждой цифры.
    /// </summary>
    public static string InsertSymbolAfterDigits(string text, char symbol)
    {
        // Используем string.Join для более гибкой вставки, или Regex как в задании 9, но с символом.
        // Здесь используем StringBuilder, чтобы быть более явным.
        StringBuilder sb = new StringBuilder();
        foreach (char c in text)
        {
            sb.Append(c);
            if (char.IsDigit(c))
            {
                sb.Append(symbol);
            }
        }
        return sb.ToString();
    }


    /// <summary>
    /// 10. Изменить введенную строку так, чтобы каждая из цифр увеличилась на 1 (9 заменить 0).
    /// </summary>
    public static string IncrementDigits(string text)
    {
        StringBuilder sb = new StringBuilder();
        foreach (char c in text)
        {
            if (char.IsDigit(c))
            {
                int digit = (int)char.GetNumericValue(c);
                digit = (digit + 1) % 10; // Увеличение на 1, 9 становится 0
                sb.Append(digit);
            }
            else
            {
                sb.Append(c);
            }
        }
        return sb.ToString();
    }

    /// <summary>
    /// 11. Преобразовать введенную строку так, чтобы сначала были расположены цифры, потом буквы.
    /// </summary>
    public static string SortDigitsThenLetters(string text)
    {
        StringBuilder digits = new StringBuilder();
        StringBuilder letters = new StringBuilder();
        StringBuilder others = new StringBuilder();

        foreach (char c in text)
        {
            if (char.IsDigit(c))
            {
                digits.Append(c);
            }
            else if (char.IsLetter(c))
            {
                letters.Append(c);
            }
            else
            {
                others.Append(c); // Остальные символы оставляем как есть, их позиция не определена
            }
        }
        // Можно дополнительно отсортировать digits и letters, если это подразумевается.
        // Например: string.Concat(digits.ToString().OrderBy(x => x))
        // Но по условию задачи просто их расположение: цифры, затем буквы.
        return digits.Append(letters).Append(others).ToString();
    }

    /// <summary>
    /// 13. Зашифровать введенное слово, сместив все буквы на 1 позицию (последняя становиться первой).
    /// (Циклический сдвиг вправо)
    /// </summary>
    public static string EncryptWordCyclicShift(string word)
    {
        if (string.IsNullOrEmpty(word) || word.Length == 1)
        {
            return word;
        }
        return word[word.Length - 1] + word.Substring(0, word.Length - 1);
    }

    /// <summary>
    /// 14. Введенную строку цифр вывести, расположив в каждой подстроке по 5 цифр.
    /// </summary>
    public static void DisplayDigitsInSubstrings(string text, int chunkSize)
    {
        for (int i = 0; i < text.Length; i += chunkSize)
        {
            if (i + chunkSize <= text.Length)
            {
                Console.WriteLine(text.Substring(i, chunkSize));
            }
            else
            {
                Console.WriteLine(text.Substring(i)); // Остаток
            }
        }
    }

    /// <summary>
    /// 15. Преобразовать буквы введенной строки так, чтобы их ASCII-коды увеличились на 3.
    /// </summary>
    public static string IncrementLetterAsciiByThree(string text)
    {
        StringBuilder sb = new StringBuilder();
        foreach (char c in text)
        {
            if (char.IsLetter(c))
            {
                sb.Append((char)((int)c + 3));
            }
            else
            {
                sb.Append(c);
            }
        }
        return sb.ToString();
    }

    /// <summary>
    /// 16. Функция, подсчитывающая сумму цифр, кратных 3, в строке.
    /// </summary>
    public static int SumDigitsDivisibleByThree(string text)
    {
        int sum = 0;
        foreach (char c in text)
        {
            if (char.IsDigit(c))
            {
                int digit = (int)char.GetNumericValue(c);
                if (digit % 3 == 0)
                {
                    sum += digit;
                }
            }
        }
        return sum;
    }

    /// <summary>
    /// 17. Функция, подсчитывающая сумму цифр в строке.
    /// </summary>
    public static int SumDigitsInString(string text)
    {
        int sum = 0;
        foreach (char c in text)
        {
            if (char.IsDigit(c))
            {
                sum += (int)char.GetNumericValue(c);
            }
        }
        return sum;
    }

    /// <summary>
    /// 18. Функция, определяющая количество символов введенной строки, ASCII-коды которых >=70.
    /// </summary>
    public static int CountCharsWithAsciiGreaterThanOrEqualTo70(string text)
    {
        int count = 0;
        foreach (char c in text)
        {
            if ((int)c >= 70)
            {
                count++;
            }
        }
        return count;
    }

    /// <summary>
    /// 19. Процедура (функция, возвращающая модифицированную строку), добавляющая справа заданное количество заданных символов.
    /// </summary>
    public static string AddCharsRight(string text, char charToAdd, int count)
    {
        return text + new string(charToAdd, count);
    }

    /// <summary>
    /// 20. Процедура (функция), позволяющая из заданной строки удалить пробелы.
    /// </summary>
    public static string RemoveSpaces(string text)
    {
        return text.Replace(" ", "");
    }

    /// <summary>
    /// 21. Процедура (функция), позволяющая записывать введенное слово в зеркальном отображении.
    /// </summary>
    public static string ReverseString(string text)
    {
        char[] charArray = text.ToCharArray();
        Array.Reverse(charArray);
        return new string(charArray);
    }

    /// <summary>
    /// 22. Процедура, которая позволяет введенный текст разбить на строки по k символов.
    /// </summary>
    public static void SplitTextIntoLines(string text, int k)
    {
        if (k <= 0) return; // Защита от деления на ноль или некорректного k

        for (int i = 0; i < text.Length; i += k)
        {
            if (i + k <= text.Length)
            {
                Console.WriteLine(text.Substring(i, k));
            }
            else
            {
                Console.WriteLine(text.Substring(i)); // Остаток
            }
        }
    }

    /// <summary>
    /// 23. Процедура (функция), которая позволит во введенной строке через каждые n символов вставить k пробелов.
    /// </summary>
    public static string InsertSpacesPeriodically(string text, int n, int k)
    {
        if (n <= 0 || k < 0 || text.Length == 0) return text;

        StringBuilder sb = new StringBuilder();
        string spaces = new string(' ', k);

        for (int i = 0; i < text.Length; i++)
        {
            sb.Append(text[i]);
            if ((i + 1) % n == 0 && i < text.Length - 1) // Вставляем пробелы, кроме конца строки
            {
                sb.Append(spaces);
            }
        }
        return sb.ToString();
    }

    /// <summary>
    /// 24. Процедура (функция), которая в заданном тексте заменяет слово А1 на слово А2 (длины слов не совпадают).
    /// </summary>
    public static string ReplaceWord(string text, string oldWord, string newWord)
    {
        return text.Replace(oldWord, newWord);
    }

    /// <summary>
    /// 25. Процедура (функция), которая во введенном слове заменяет один символ другим.
    /// Также используется для Задания 27.
    /// </summary>
    public static string ReplaceChar(string text, char oldChar, char newChar)
    {
        return text.Replace(oldChar, newChar);
    }

    /// <summary>
    /// 26. Процедура (функция), которая в тексте убирает лишние пробелы между словами, оставив по одному.
    /// </summary>
    public static string RemoveExtraSpaces(string text)
    {
       
        return Regex.Replace(text.Trim(), @"\s+", " ");
    }

    

    /// <summary>
    /// 29. Процедура (функция), которая все пробелы в предложении заменяет на символ "_".
    /// </summary>
    public static string ReplaceSpacesWithUnderscore(string text)
    {
        return text.Replace(' ', '_');
    }

    /// <summary>
    /// 30. Процедура (функция), которая удаляет из предложения буквы «р» и «с».
    /// </summary>
    public static string RemoveSpecificChars(string text, params char[] charsToRemove)
    {
        StringBuilder sb = new StringBuilder(text.Length);
        foreach (char c in text)
        {
            bool shouldRemove = false;
            foreach (char charToRemove in charsToRemove)
            {
                if (char.ToLowerInvariant(c) == char.ToLowerInvariant(charToRemove)) // Регистронезависимое удаление
                {
                    shouldRemove = true;
                    break;
                }
            }
            if (!shouldRemove)
            {
                sb.Append(c);
            }
        }
        return sb.ToString();
    }
}

                                                                                                                    //Practica 15//

public class MathAndConvertTasks
{

    private static Random _random = new Random();

    public static void Main(string[] args)
    {
        
        Console.OutputEncoding = System.Text.Encoding.UTF8;

        while (true)
        {
            Console.WriteLine("\n\n--- МЕНЮ ЗАДАНИЙ (Математика и Преобразование типов) ---");
            Console.WriteLine("--- Математические вычисления и класс Math ---");
            Console.WriteLine(" 1. Вычисление гипотенузы.");
            Console.WriteLine(" 2. Округление чисел.");
            Console.WriteLine(" 3. Тригонометрические функции.");
            Console.WriteLine(" 4. Генератор случайных чисел (10 от 1 до 100).");
            Console.WriteLine(" 5. Минимум и максимум в массиве чисел.");

            Console.WriteLine("\n--- Преобразование типов и класс Convert ---");
            Console.WriteLine(" 6. Конвертация строки в число (с обработкой ошибок).");
            Console.WriteLine(" 7. Преобразование числа в двоичную строку.");
            Console.WriteLine(" 8. Конвертация строки в DateTime.");
            Console.WriteLine(" 9. Изменение типа данных (object в double).");
            Console.WriteLine("10. Работа с булевыми значениями.");

            Console.WriteLine("0. Выход из программы.");
            Console.Write("Введите номер задания: ");

            string choice = Console.ReadLine();

            if (choice == "0")
            {
                Console.WriteLine("Завершение работы программы.");
                break;
            }

            switch (choice)
            {
                case "1":
                    Console.WriteLine("\n--- Задание 1: Вычисление гипотенузы ---");
                    Console.Write("Введите длину первого катета (a): ");
                    if (!double.TryParse(Console.ReadLine(), out double a) || a <= 0)
                    {
                        Console.WriteLine("Некорректное значение катета. Введите положительное число.");
                        break;
                    }
                    Console.Write("Введите длину второго катета (b): ");
                    if (!double.TryParse(Console.ReadLine(), out double b) || b <= 0)
                    {
                        Console.WriteLine("Некорректное значение катета. Введите положительное число.");
                        break;
                    }
                    double hypotenuse = CalculateHypotenuse(a, b);
                    Console.WriteLine($"Гипотенуза c: {hypotenuse:F2}");
                    break;

                case "2":
                    Console.WriteLine("\n--- Задание 2: Округление чисел ---");
                    Console.Write("Введите число для округления: ");
                    if (!double.TryParse(Console.ReadLine(), out double numToRound))
                    {
                        Console.WriteLine("Некорректное число.");
                        break;
                    }
                    DemonstrateRounding(numToRound);
                    break;

                case "3":
                    Console.WriteLine("\n--- Задание 3: Тригонометрические функции ---");
                    Console.Write("Введите угол в градусах: ");
                    if (!double.TryParse(Console.ReadLine(), out double angleDegrees))
                    {
                        Console.WriteLine("Некорректное значение угла.");
                        break;
                    }
                    CalculateTrigonometricFunctions(angleDegrees);
                    break;

                case "4":
                    Console.WriteLine("\n--- Задание 4: Генератор случайных чисел ---");
                    Console.WriteLine("Генерация 10 случайных чисел в диапазоне от 1 до 100:");
                    GenerateRandomNumbers(10, 1, 100);
                    break;

                case "5":
                    Console.WriteLine("\n--- Задание 5: Минимум и максимум в массиве чисел ---");
                    Console.Write("Введите числа, разделенные пробелами (например, 10.5 20 5.1 -3.2): ");
                    string numbersInput = Console.ReadLine();
                    double[] numbersArray = ParseDoubleArray(numbersInput);

                    if (numbersArray == null || numbersArray.Length == 0)
                    {
                        Console.WriteLine("Некорректный ввод или массив пуст.");
                        break;
                    }

                    (double min, double max) = FindMinMax(numbersArray);
                    Console.WriteLine($"Минимальное значение: {min}");
                    Console.WriteLine($"Максимальное значение: {max}");
                    break;

                case "6":
                    Console.WriteLine("\n--- Задание 6: Конвертация строки в число (с обработкой ошибок) ---");
                    ConvertStringToInt();
                    break;

                case "7":
                    Console.WriteLine("\n--- Задание 7: Преобразование числа в двоичную строку ---");
                    Console.Write("Введите целое число: ");
                    if (!int.TryParse(Console.ReadLine(), out int intToConvert))
                    {
                        Console.WriteLine("Некорректное целое число.");
                        break;
                    }
                    string binaryString = ConvertIntToBinaryString(intToConvert);
                    Console.WriteLine($"Десятичное {intToConvert} в двоичном: {binaryString}");
                    break;

                case "8":
                    Console.WriteLine("\n--- Задание 8: Конвертация строки в DateTime ---");
                    ConvertStringToDateTime();
                    break;

                case "9":
                    Console.WriteLine("\n--- Задание 9: Изменение типа данных (object в double) ---");
                    Console.WriteLine("Будут продемонстрированы 3 примера:");
                    Console.WriteLine("1. Преобразование int (object):");
                    ConvertObjectToDouble(123);
                    Console.WriteLine("2. Преобразование string \"45.67\" (object):");
                    ConvertObjectToDouble("45.67");
                    Console.WriteLine("3. Преобразование null (object):");
                    ConvertObjectToDouble(null);
                    break;

                case "10":
                    Console.WriteLine("\n--- Задание 10: Работа с булевыми значениями ---");
                    ConvertStringsToBool();
                    break;

                default:
                    Console.WriteLine("Неверный выбор. Пожалуйста, введите номер задания от 0 до 10.");
                    break;
            }
        }
    }

    // --- Методы для заданий ---

    /// <summary>
    /// 1. Вычисление гипотенузы
    /// Принимает катеты прямоугольного треугольника и возвращает гипотенузу,
    /// используя Math.Sqrt и Math.Pow.
    /// </summary>
    public static double CalculateHypotenuse(double a, double b)
    {
   
        return Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));
    }

    /// <summary>
    /// 2. Округление чисел
    /// Демонстрирует округление числа до ближайшего целого (Math.Round),
    /// вверх (Math.Ceiling) и вниз (Math.Floor).
    /// </summary>
    public static void DemonstrateRounding(double number)
    {
        Console.WriteLine($"Исходное число: {number}");
        Console.WriteLine($"Округление до ближайшего целого (Math.Round): {Math.Round(number)}");
        Console.WriteLine($"Округление вверх (Math.Ceiling): {Math.Ceiling(number)}");
        Console.WriteLine($"Округление вниз (Math.Floor): {Math.Floor(number)}");
    }

    /// <summary>
    /// 3. Тригонометрические функции
    /// Вычисляет синус, косинус и тангенс угла (в градусах),
    /// преобразуя его в радианы (Math.PI).
    /// </summary>
    public static void CalculateTrigonometricFunctions(double angleDegrees)
    {
       
        double angleRadians = angleDegrees * (Math.PI / 180.0);

        Console.WriteLine($"Угол в градусах: {angleDegrees}");
        Console.WriteLine($"Угол в радианах: {angleRadians:F4}");
        Console.WriteLine($"Синус: {Math.Sin(angleRadians):F4}");
        Console.WriteLine($"Косинус: {Math.Cos(angleRadians):F4}");

        double tan = Math.Tan(angleRadians);
        if (double.IsInfinity(tan) || double.IsNaN(tan))
        {
            Console.WriteLine("Тангенс: Неопределен (угол близок к 90 или 270 градусам)");
        }
        else
        {
            Console.WriteLine($"Тангенс: {tan:F4}");
        }
    }

    /// <summary>
    /// 4. Генератор случайных чисел
    /// Использует System.Random для генерации 10 случайных чисел в диапазоне от 1 до 100.
    /// (Важно: Math.Random в C# нет, используется System.Random)
    /// </summary>
    public static void GenerateRandomNumbers(int count, int min, int max)
    {
        Console.WriteLine($"Генерируется {count} случайных чисел от {min} до {max}:");
        for (int i = 0; i < count; i++)
        {
            Console.WriteLine($"- {_random.Next(min, max + 1)}");
        }
    }

    /// <summary>
    /// Вспомогательный метод для парсинга массива double из строки.
    /// </summary>
    private static double[] ParseDoubleArray(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            return null;
        }
        return input.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)
                    .Select(s =>
                    {
                        if (double.TryParse(s, out double value))
                        {
                            return value;
                        }
                        return double.NaN;
                    })
                    .Where(d => !double.IsNaN(d)) 
                    .ToArray();
    }

    /// <summary>
    /// 5. Минимум и максимум
    /// Принимает массив чисел и возвращает минимальное (Math.Min)
    /// и максимальное (Math.Max) значение.
    /// </summary>
    public static (double min, double max) FindMinMax(double[] numbers)
    {
        if (numbers == null || numbers.Length == 0)
        {
            throw new ArgumentException("Массив не может быть пустым или null.");
        }

        double minVal = numbers[0];
        double maxVal = numbers[0];

        for (int i = 1; i < numbers.Length; i++)
        {
            minVal = Math.Min(minVal, numbers[i]);
            maxVal = Math.Max(maxVal, numbers[i]);
        }
        return (minVal, maxVal);
    }

    /// <summary>
    /// 6. Конвертация строки в число
    /// Запрашивает у пользователя строку и пытается преобразовать её в int
    /// с помощью Convert.ToInt32. Обрабатывает исключение FormatException.
    /// </summary>
    public static void ConvertStringToInt()
    {
        Console.Write("Введите строку для преобразования в целое число: ");
        string inputString = Console.ReadLine();
        try
        {
            int number = Convert.ToInt32(inputString);
            Console.WriteLine($"Строка '{inputString}' успешно преобразована в число: {number}");
        }
        catch (FormatException)
        {
            Console.WriteLine($"Ошибка: Строка '{inputString}' не является корректным форматом для целого числа.");
        }
        catch (OverflowException)
        {
            Console.WriteLine($"Ошибка: Число '{inputString}' слишком велико или мало для типа int.");
        }
        catch (Exception ex) 
        {
            Console.WriteLine($"Произошла непредвиденная ошибка: {ex.Message}");
        }
    }

    /// <summary>
    /// 7. Преобразование числа в двоичную строку
    /// Принимает целое число и возвращает его двоичное представление
    /// (Convert.ToString(number, 2)).
    /// </summary>
    public static string ConvertIntToBinaryString(int number)
    {
        return Convert.ToString(number, 2);
    }

    /// <summary>
    /// 8. Конвертация даты
    /// Преобразует строку (например, "2025-05-26") в DateTime
    /// с помощью Convert.ToDateTime.
    /// </summary>
    public static void ConvertStringToDateTime()
    {
        Console.Write("Введите строку с датой (например, \"2025-05-26\", \"26.05.2025\"): ");
        string dateString = Console.ReadLine();
        try
        {
            DateTime date = Convert.ToDateTime(dateString);
            Console.WriteLine($"Строка '{dateString}' успешно преобразована в дату: {date.ToShortDateString()}");
        }
        catch (FormatException)
        {
            Console.WriteLine($"Ошибка: Строка '{dateString}' не является корректным форматом даты.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Произошла непредвиденная ошибка: {ex.Message}");
        }
    }

    /// <summary>
    /// 9. Изменение типа данных
    /// Принимает object и пытается преобразовать его в double
    /// с помощью Convert.ToDouble.
    /// </summary>
    public static void ConvertObjectToDouble(object obj)
    {
        Console.Write($"Преобразуем '{obj ?? "null"}' (тип: {obj?.GetType().Name ?? "null"}) в double: ");
        try
        {
            double result = Convert.ToDouble(obj);
            Console.WriteLine($"Успешно: {result}");
        }
        catch (InvalidCastException)
        {
            Console.WriteLine("Ошибка: Невозможно преобразовать данный тип в double.");
        }
        catch (FormatException)
        {
            Console.WriteLine("Ошибка: Строка не является корректным числовым форматом.");
        }
        catch (ArgumentNullException)
        {
          
            Console.WriteLine("Ошибка: Переданное значение null не может быть преобразовано в double напрямую.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Произошла непредвиденная ошибка: {ex.Message}");
        }
    }

    /// <summary>
    /// 10. Работа с булевыми значениями
    /// Преобразует строки "True", "False", "1", "0" и другие в bool
    /// с помощью Convert.ToBoolean.
    /// </summary>
    public static void ConvertStringsToBool()
    {
        string[] testStrings = { "True", "False", "1", "0", "true", "false", "TRUE", "FALSE", "any_other_text", "2", "-1", " " };

        Console.WriteLine("Демонстрация Convert.ToBoolean:");
        foreach (string s in testStrings)
        {
            try
            {
                bool result = Convert.ToBoolean(s);
                Console.WriteLine($"Строка '{s}' преобразована в bool: {result}");
            }
            catch (FormatException)
            {
                Console.WriteLine($"Ошибка: Строка '{s}' не может быть преобразована в bool.");
            }
        }
    }
}


Делали эту практику 14 :Козин Андрей(Ип-21),Мелик Вартанов(Ип-21),Рябченко Тимофей(Ип-21) 
