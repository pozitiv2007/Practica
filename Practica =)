using System;
using System.Collections.Generic;







//Practica 5//
/*
public class GenericClass<T>
{
    private T _field;

    public T Property
    {
        get { return _field; }
        set { _field = value; }
    }

    public GenericClass(T initialValue)
    {
        _field = initialValue;
    }
}

public class Program
{
    public static void Main()
    {
        var intInstance = new GenericClass<int>(10);
        Console.WriteLine("Initial value: " + intInstance.Property);
        intInstance.Property = 20;
        Console.WriteLine("Updated value: " + intInstance.Property);

        var stringInstance = new GenericClass<string>("Hello");
        Console.WriteLine("Initial value: " + stringInstance.Property);
        stringInstance.Property = "Andrey";
        Console.WriteLine("Updated value: " + stringInstance.Property);
    }
}
*/






/*
public class Program
{
    public static T GetMaxElement<T>(T[] array) where T : IComparable<T>
    {
        if (array == null || array.Length == 0)
            throw new ArgumentException("Array is null or empty");

        T maxElement = array[0];
        foreach (var element in array)
        {
            if (element.CompareTo(maxElement) > 0)
            {
                maxElement = element;
            }
        }
        return maxElement;
    }

    public static void Main()
    {
        int[] intArray = { 15, 45, 300, 69, 228 };
        Console.WriteLine("Max int: " + GetMaxElement(intArray));

        string[] stringArray = { "apple", "orange", "banana" };
        Console.WriteLine("Max string: " + GetMaxElement(stringArray));
    }
}
*/


/*
public class GenericArray<T>
{
    public T[] Array { get; private set; }

    public GenericArray(T[] array)
    {
        Array = array;
    }

    public static GenericArray<T> operator +(GenericArray<T> first, GenericArray<T> second)
    {
        if (first == null || second == null)
            throw new ArgumentNullException("One of the arrays is null");

        T[] combinedArray = new T[first.Array.Length + second.Array.Length];
        first.Array.CopyTo(combinedArray, 0);
        second.Array.CopyTo(combinedArray, first.Array.Length);

        return new GenericArray<T>(combinedArray);
    }

    public void Print()
    {
        Console.WriteLine(string.Join(", ", Array));
    }
}

public class Program
{
    public static void Main()
    {
        var intArray1 = new GenericArray<int>(new int[] { 15, 25, 35 });
        var intArray2 = new GenericArray<int>(new int[] { 45, 55 });

        var resultArray = intArray1 + intArray2;
        resultArray.Print(); 
    }
}
*/

/*
public class GenericArray<T>
{
    private T[] array;

    public GenericArray()
    {
        array = new T[0];
    }

    public void Add(T item)
    {
        T[] newArray = new T[array.Length + 1];
        array.CopyTo(newArray, 0);
        newArray[array.Length] = item;
        array = newArray;
    }

    public void Remove(int index)
    {
        if (index < 0 || index >= array.Length)
            throw new ArgumentOutOfRangeException("Index out of range");

        T[] newArray = new T[array.Length - 1];
        for (int i = 0, j = 0; i < array.Length; i++)
        {
            if (i != index)
            {
                newArray[j++] = array[i];
            }
        }
        array = newArray;
    }

    public T Get(int index)
    {
        if (index < 0 || index >= array.Length)
            throw new ArgumentOutOfRangeException("Index out of range");
        return array[index];
    }

    public int Length => array.Length;
}

public class Program
{
    public static void Main()
    {
        var genericArray = new GenericArray<string>();
        genericArray.Add("Hello");
        genericArray.Add("Maksim");
        Console.WriteLine(genericArray.Get(0));
        Console.WriteLine(genericArray.Length);  

        genericArray.Remove(0);
        Console.WriteLine(genericArray.Get(0)); 
        Console.WriteLine(genericArray.Length);   
    }
}
*/










/*                                                                                                                //Practica 6//
class Program
{
    static void Main()
    {
        try
        {
            Console.Write("Введите коэффициент A: ");
            int A = Convert.ToInt32(Console.ReadLine());

            Console.Write("Введите коэффициент B: ");
            int B = Convert.ToInt32(Console.ReadLine());

            if (A == 0 && B == 0)
            {
                Console.WriteLine("Решение существует: любое целое число x является решением.");
            }
            else if (A == 0)
            {
                Console.WriteLine("Нет решений: A равно 0, B не равно 0.");
            }
            else if (B % A == 0)
            {
                int x = B / A;
                Console.WriteLine($"Решение: x = {x}.");
            }
            else
            {
                Console.WriteLine("Нет решений: B не делится на A без остатка.");
            }
        }
        catch (FormatException)
        {
            Console.WriteLine("Ошибка: вводите целые числа.");
        }
        catch (OverflowException)
        {
            Console.WriteLine("Ошибка: введено слишком большое число.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Неизвестная ошибка: {ex.Message}");
        }
    }
}
*/






/*
class Program
{
    static void Main()
    {
        while (true)
        {
            Console.Write("Введите целое число (или любой другой символ для выхода): ");
            string input = Console.ReadLine();

            if (!int.TryParse(input, out int number))
                break;

            try
            {
                CheckNumber(number);
            }
            catch (OverflowException)
            {
                Console.WriteLine("Нечетное число.");
            }
            catch (ArithmeticException)
            {
                Console.WriteLine("Четное число.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Неизвестная ошибка: {ex.Message}");
            }
        }
    }

    static void CheckNumber(int number)
    {
        if (number % 2 == 0)
            throw new ArithmeticException();
        else
            throw new OverflowException();
    }
}
*/




/*
class CustomException : Exception
{
    public char[] CharArray { get; }

    public CustomException(int size) : base("Исключение пользовательского типа")
    {
        CharArray = new char[size];
        for (int i = 0; i < size; i++)
        {
            CharArray[i] = (char)('A' + i);
        }
    }
}

class Program
{
    static void Main()
    {
        try
        {
          
            throw new CustomException(26); 
        }
        catch (CustomException ex)
        {
          
            Console.WriteLine("Содержимое массива:");
            Console.WriteLine(string.Join(", ", ex.CharArray));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Неизвестная ошибка: {ex.Message}");
        }
    }
}
*/

//Practica 8//


/*
class Animal
{
    public virtual void Speak() => Console.WriteLine("Animal speaks");
}

class Dog : Animal
{
    public override void Speak() => Console.WriteLine("Bark");
}

class Cat : Animal
{
    public override void Speak() => Console.WriteLine("Meow");
}

class Program
{
    // Ковариантный делегат
    public delegate T AnimalFunc<out T>();

    // Контравариантный делегат
    public delegate void AnimalAction<in T>(T animal);

    static void Main()
    {
        // Ковариантность
        AnimalFunc<Animal> getDog = () => new Dog();
        Animal dog = getDog(); // Возвращаем Dog как Animal
        dog.Speak();

        // Контравариантность
        AnimalAction<Animal> actAnimal = animal => animal.Speak();
        AnimalAction<Dog> actDog = actAnimal; // Присваиваем с явным преобразованием
        actDog(new Dog()); // Вызываем метод с Dog
    }
}
*/

/*
class Animal
{
    public virtual void Speak() => Console.WriteLine("Animal speaks");
}

class Dog : Animal
{
    public override void Speak() => Console.WriteLine("Bark");
}

class Cat : Animal
{
    public override void Speak() => Console.WriteLine("Meow");
}

class Program
{
    public delegate T AnimalProducer<out T>();
    public delegate void AnimalAction<in T>(T a);

    public delegate void AnimalHandler<in T>(T animal);

    static void Main()
    {
        List<Animal> zooAnimals = new List<Animal> { new Dog(), new Cat() };

        AnimalProducer<Animal> getAnimal = () => new Dog();
        Animal animalInstance = getAnimal();
        animalInstance.Speak();

        AnimalAction<Animal> actAnimal = a => a.Speak();
        AnimalAction<Dog> actDog = actAnimal;
        actDog(new Dog());

        AnimalHandler<Animal> handleAnimal = a => a.Speak();
        HandleAnimals(zooAnimals, handleAnimal);
    }

    static void HandleAnimals<T>(List<T> animals, AnimalHandler<T> handler)
    {
        foreach (var a in animals)
        {
            handler(a);
        }
    }
}
*/


//Practica 9//


/*
abstract class BaseArray
{
    protected int[] array;

    public BaseArray(int size)
    {
        array = new int[size];
    }

    public int Size => array.Length;

    public abstract void Display();

    public int this[int index]
    {
        get => array[index];
        set => array[index] = value;
    }
}

class DerivedArray : BaseArray
{
    public DerivedArray(int size) : base(size) { }

    public override void Display()
    {
        Console.WriteLine("Array contents:");
        for (int i = 0; i < Size; i++)
        {
            Console.Write(array[i] + " ");
        }
        Console.WriteLine();
    }
}

class Program
{
    static void Main()
    {
        DerivedArray myArray = new DerivedArray(5);
        for (int i = 0; i < myArray.Size; i++)
        {
            myArray[i] = i * 10; // Присваиваем значения
        }

        myArray.Display(); // Отображаем содержимое 
    }
}
*/





/*
interface ICalculator
{
    int Calculate(int multiplier);
}

abstract class BaseClass
{
    protected int field1;
    protected int field2;

    public BaseClass(int value1, int value2)
    {
        field1 = value1;
        field2 = value2;
    }

    public abstract int this[int index] { get; set; }
}

class DerivedClass : BaseClass, ICalculator
{
    public DerivedClass(int value1, int value2) : base(value1, value2) { }

    public override int this[int index]
    {
        get => index % 2 == 0 ? field1 : field2;
        set
        {
            if (index % 2 == 0)
                field1 = value;
            else
                field2 = value;
        }
    }

    public int Calculate(int multiplier)
    {
        return (field1 + field2) * multiplier;
    }
}

class Program
{
    static void Main()
    {
        DerivedClass obj = new DerivedClass(5, 10);

        // Пример использования индексатора
        Console.WriteLine(obj[0]); 
        Console.WriteLine(obj[1]); 

        // Пример использования метода
        int result = obj.Calculate(2);
        Console.WriteLine(result); 
    }
}
*/



/*
abstract class BaseClass
{
    public abstract int Property { get; set; }
    
    public abstract int this[int index] { get; set; }
    
    public abstract void Display();
}

interface IProperty
{
    int Property { get; set; }
}

interface IIndexer
{
    int this[int index] { get; set; }
}

class DerivedClass : BaseClass, IProperty, IIndexer
{
    private int _value;
    private int[] _array = new int[5];

    public override int Property
    {
        get => _value;
        set => _value = value;
    }

    public override int this[int index]
    {
        get => _array[index];
        set => _array[index] = value;
    }

    public override void Display()
    {
        Console.WriteLine($"Property: {Property}");
        for (int i = 0; i < _array.Length; i++)
        {
            Console.WriteLine($"Index {i}: {_array[i]}");
        }
    }

    int IProperty.Property
    {
        get => Property;
        set => Property = value;
    }

    int IIndexer.this[int index]
    {
        get => this[index];
        set => this[index] = value;
    }
}

class Program
{
    static void Main()
    {
        DerivedClass obj = new DerivedClass();
        
        obj.Property = 10;
        for (int i = 0; i < 5; i++)
        {
            obj[i] = i * 2;
        }

        obj.Display();

        IProperty propInterface = obj;
        propInterface.Property = 20;
        IIndexer indexerInterface = obj;
        indexerInterface[0] = 111;

        Console.WriteLine("\nThrough interface:");
        Console.WriteLine($"Property: {propInterface.Property}");
        Console.WriteLine($"Index 0: {indexerInterface[0]}");
    }
}
*/


                                                                                //Practica 11//
/* Задание 1 и 2
class Футболист
{
    public string Имя { get; set; }
    public int Номер { get; set; }

    public Футболист(string имя, int номер)
    {
        Имя = имя;
        Номер = номер;
    }

    public override string ToString()
    {
        return $"{Имя} (номер {Номер})";
    }
}

class ФутбольнаяКоманда
{
    private Футболист[] футболисты = new Футболист[11];

    public Футболист this[int index]
    {
        get
        {
            if (index < 0 || index >= футболисты.Length) return null; // Возвращаем null вместо исключения
            return футболисты[index];
        }
        set
        {
            if (index >= 0 && index < футболисты.Length)
                футболисты[index] = value;
        }
    }
}

class Program
{
    static void Main()
    {
        ФутбольнаяКоманда команда = new ФутбольнаяКоманда();
        команда[0] = new Футболист("Игрок 1", 10);
        команда[1] = new Футболист("Игрок 2", 9);

        for (int i = 0; i < 12; i++) // Попытка доступа к 12 индексам
        {
            var игрок = команда[i];
            if (игрок != null)
                Console.WriteLine(игрок);
            else
                Console.WriteLine($"Игрок с индексом {i} отсутствует.");
        }
    }
}
*/


/* Задание 3
class Word
{
    public string Source { get; }
    public string Target { get; set; }

    public Word(string source, string target)
    {
        Source = source;
        Target = target;
    }
}

class Dictionary
{
    private Word[] words;

    public Dictionary()
    {
        words = new Word[]
        {
            new Word("red", "красный"),
            new Word("blue", "синий"),
            new Word("green", "зеленый")
        };
    }

    public string this[string source]
    {
        get
        {
            foreach (var word in words)
            {
                if (word.Source.Equals(source, StringComparison.OrdinalIgnoreCase))
                {
                    return word.Target;
                }
            }
            return null; 
        }
        set
        {
            for (int i = 0; i < words.Length; i++)
            {
                if (words[i].Source.Equals(source, StringComparison.OrdinalIgnoreCase))
                {
                    words[i].Target = value; 
                    return;
                }
            }
       
            Array.Resize(ref words, words.Length + 1);
            words[words.Length - 1] = new Word(source, value);
        }
    }
}

class Program
{
    static void Main()
    {
        Dictionary dictionary = new Dictionary();

        Console.WriteLine(dictionary["red"]); 

        dictionary["red"] = "алый";
        Console.WriteLine(dictionary["red"]); 

        dictionary["yellow"] = "желтый";
        Console.WriteLine(dictionary["yellow"]);
    }
}
*/






/* Задание 4
class CyclicArray
{
    private int[] numbers;
    private int currentIndex;

    public CyclicArray(int[] initialValues)
    {
        numbers = initialValues;
        currentIndex = 0;
    }

    public int CurrentValue
    {
        get
        {
            return numbers[currentIndex];
        }
        set
        {
            numbers[currentIndex] = value;
            currentIndex = (currentIndex + 1) % numbers.Length;
        }
    }

    public void PrintArray()
    {
        Console.WriteLine("Array values:");
        foreach (var number in numbers)
        {
            Console.WriteLine(number);
        }
    }
}

class Program
{
    static void Main()
    {
        CyclicArray cyclicArray = new CyclicArray(new int[] { 10, 20, 30, 40 });

       
        Console.WriteLine(cyclicArray.CurrentValue); 

       
        cyclicArray.CurrentValue = 99;
        Console.WriteLine(cyclicArray.CurrentValue); 

        cyclicArray.CurrentValue = 88;
        Console.WriteLine(cyclicArray.CurrentValue); 

        cyclicArray.CurrentValue = 77;
        Console.WriteLine(cyclicArray.CurrentValue);

        cyclicArray.CurrentValue = 66;
        Console.WriteLine(cyclicArray.CurrentValue); 

       
        cyclicArray.PrintArray();
    }
}
*/





/* Задание 6
public class CustomNumber
{
    private int number;

    public CustomNumber()
    {
        number = 0;
    }

    public int this[int index]
    {
        set
        {
            int digit = value % 10;
            if (index < 0) throw new IndexOutOfRangeException("Индекс должен быть неотрицательным");
            number = SetDigitAtPosition(number, index, digit);
        }
    }

    private int SetDigitAtPosition(int num, int position, int digit)
    {
        int factor = (int)Math.Pow(10, position);
        int higherPart = num / (factor * 10);
        int lowerPart = num % factor;
        return higherPart * (factor * 10) + digit * factor + lowerPart;
    }

    public override string ToString()
    {
        return number.ToString();
    }
}

// Пример использования:
public class Program
{
    public static void Main()
    {
        CustomNumber customNumber = new CustomNumber();
        customNumber[0] = 5; // 5
        customNumber[1] = 8; // 85
        customNumber[2] = 3; // 385
        Console.WriteLine(customNumber); // Вывод: 385
    }
}
*/

/* Задание 6
public class TextArray
{
    private string[] texts;

    public TextArray(string[] initialTexts)
    {
        texts = initialTexts;
    }

    public string this[int index]
    {
        get => texts[index % texts.Length];
        set => texts[index % texts.Length] = value;
    }

    public char this[int i, int j]
    {
        get
        {
            int textIndex = i % texts.Length;
            return texts[textIndex][j % texts[textIndex].Length];
        }
    }

    public override string ToString()
    {
        return string.Join(", ", texts);
    }
}


public class Program
{
    public static void Main()
    {
        TextArray textArray = new TextArray(new string[] { "Hello", "World", "CSharp" });
        textArray[1] = "Everyone";
        Console.WriteLine(textArray);

       
        Console.WriteLine(textArray[0, 1]);
        Console.WriteLine(textArray[2, 3]); 
        Console.WriteLine(textArray[3, 0]); 
    }
}
*/
//Practica 12//

//задание 1//
/*
class Program
{
    static void Main()
    {
   
        ArrayList arrayList = new ArrayList { 1.1, 2.2, 3.3 };

        foreach (double value in arrayList)
        {
            Console.WriteLine(value);
        }

        arrayList.Remove(2.2);
        Console.WriteLine("После удаления:");
        foreach (double value in arrayList)
        {
            Console.WriteLine(value);
        }

       
        Queue<double> queue = new Queue<double>();
        queue.Enqueue(1.1);
        queue.Enqueue(2.2);
        queue.Enqueue(3.3);

        Console.WriteLine($"Удалено из очереди: {queue.Dequeue()}");
        foreach (double value in queue)
        {
            Console.WriteLine(value);
        }

        Hashtable hashtable = new Hashtable
        {
            ["first"] = 1.1,
            ["second"] = 2.2,
            ["third"] = 3.3
        };

        foreach (DictionaryEntry entry in hashtable)
        {
            Console.WriteLine($"Ключ: {entry.Key}, Значение: {entry.Value}");
        }

        hashtable.Remove("second");
        Console.WriteLine("После удаления:");
        foreach (DictionaryEntry entry in hashtable)
        {
            Console.WriteLine($"Ключ: {entry.Key}, Значение: {entry.Value}");
        }
    }
}
*/
//задание 2//
/*
class Program
{
    static void Main()
    {
        try
        {
           
            ArrayList arrayList = new ArrayList { 1.1, 2.2, 3.3 };
            PrintArrayList(arrayList);
            arrayList.Remove(2.2);
            Console.WriteLine("После удаления:");
            PrintArrayList(arrayList);
        }
        catch (ArgumentNullException e)
        {
            Console.WriteLine($"Ошибка: {e.Message}");
        }
        catch (InvalidCastException e)
        {
            Console.WriteLine($"Ошибка: {e.Message}");
        }

        try
        {
           
            Queue<double> queue = new Queue<double>();
            queue.Enqueue(1.1);
            queue.Enqueue(2.2);
            queue.Enqueue(3.3);
            Console.WriteLine($"Удалено из очереди: {queue.Dequeue()}");
        }
        catch (InvalidOperationException e)
        {
            Console.WriteLine($"Ошибка: {e.Message}");
        }

        try
        {
            
            Hashtable hashtable = new Hashtable
            {
                ["first"] = 1.1,
                ["second"] = 2.2,
                ["third"] = 3.3
            };
            PrintHashtable(hashtable);
            hashtable.Remove("second");
            Console.WriteLine("После удаления:");
            PrintHashtable(hashtable);
        }
        catch (ArgumentException e)
        {
            Console.WriteLine($"Ошибка: {e.Message}");
        }
    }

    static void PrintArrayList(ArrayList arrayList)
    {
        foreach (double value in arrayList)
        {
            Console.WriteLine(value);
        }
    }

    static void PrintHashtable(Hashtable hashtable)
    {
        foreach (DictionaryEntry entry in hashtable)
        {
            Console.WriteLine($"Ключ: {entry.Key}, Значение: {entry.Value}");
        }
    }
}
*/
//задание 3//
/*
class Program
{
    static void Main()
    {
        ArrayList arrayList = new ArrayList { 1.1, 2.2, 3.3, 0.5, 4.0 };
        Console.WriteLine("Исходные значения:");
        PrintArrayList(arrayList);

        CalculateAverageAndModify(ref arrayList);

        Console.WriteLine("После обработки:");
        PrintArrayList(arrayList);
    }

    static void CalculateAverageAndModify(ref ArrayList arrayList)
    {
        double sum = 0;
        int count = 0;

        foreach (object obj in arrayList)
        {
            if (obj is double value)
            {
                sum += value;
                count++;
            }
        }

        double average = sum / count;
        Console.WriteLine($"Среднее арифметическое: {average}");
        for (int i = 0; i < arrayList.Count; i++)
        {
            if

(arrayList[i

] is double item && item < average)
            {
                arrayList[i] = 0; 
            }
        }
    }

    static void PrintArrayList(ArrayList arrayList)
    {
        foreach (object obj in arrayList)
        {
            Console.WriteLine(obj);
        }
    }
}
*/

//Задание 4//
/*
class Program
{
    static void Main()
    {
        Console.Write("Введите скобочную структуру: ");
        string input = Console.ReadLine();

        if (IsValidBracketSequence(input))
        {
            Console.WriteLine("Скобочная структура правильная.");
        }
        else
        {
            Console.WriteLine("Скобочная структура неправильная.");
        }
    }

    static bool IsValidBracketSequence(string input)
    {
        Stack stack = new Stack();

        foreach (char ch in input)
        {
            if (ch == '(')
            {
                stack.Push(ch);
            }
            else if (ch == ')')
            {
                if (stack.Count == 0)
                {
                    return false; 
                }
                stack.Pop();
            }
        }

        return stack.Count == 0; 
    }
}
*/

//задание 5//
/*
class Student
{
    public string LastName;
    public string FirstName;
    public int Course;
    public int MathGrade;
    public int PhysicsGrade;
    public int ComputerScienceGrade;

    public double AverageGrade()
    {
        return (MathGrade + PhysicsGrade + ComputerScienceGrade) / 3.0;
    }
}

class Program
{
    static void Main()
    {
        
        Student[] studentsArray = new Student[6]
        {
            new Student { LastName = "Иванов", FirstName = "Иван", Course = 2, MathGrade = 3, PhysicsGrade = 4, ComputerScienceGrade = 3 },
            new Student { LastName = "Петров", FirstName = "Петр", Course = 2, MathGrade = 2, PhysicsGrade = 3, ComputerScienceGrade = 4 },
            new Student { LastName = "Сидоров", FirstName = "Сидор", Course = 1, MathGrade = 5, PhysicsGrade = 5, ComputerScienceGrade = 5 },
            new Student { LastName = "Федоров", FirstName = "Федор", Course = 2, MathGrade = 3, PhysicsGrade = 2, ComputerScienceGrade = 4 },
            new Student { LastName = "Кузнецов", FirstName = "Алексей", Course = 3, MathGrade = 4, PhysicsGrade = 5, ComputerScienceGrade = 4 },
            new Student { LastName = "Смирнов", FirstName = "Смирно", Course = 2, MathGrade = 5, PhysicsGrade = 5, ComputerScienceGrade = 5 }
        };

        string worstStudentArray = FindWorstStudent(studentsArray);
        Console.WriteLine($"Студент 2-го курса с худшими оценками (массив): {worstStudentArray}");

        
        Queue<Student> studentsQueue = new Queue<Student>();
        studentsQueue.Enqueue(new Student { LastName = "Иванов", FirstName = "Иван", Course = 2, MathGrade = 3, PhysicsGrade = 4, ComputerScienceGrade = 3 });
        studentsQueue.Enqueue(new Student { LastName = "Петров", FirstName = "Петр", Course = 2, MathGrade = 2, PhysicsGrade = 3, ComputerScienceGrade = 4 });
        studentsQueue.Enqueue(new Student { LastName = "Сидоров", FirstName = "Сидор", Course = 1, MathGrade = 5, PhysicsGrade = 5, ComputerScienceGrade = 5 });
        studentsQueue.Enqueue(new Student { LastName = "Федоров", FirstName = "Федор", Course = 2, MathGrade = 3, PhysicsGrade = 2, ComputerScienceGrade = 4 });
        studentsQueue.Enqueue(new Student { LastName = "Кузнецов", FirstName = "Алексей", Course = 3, MathGrade = 4, PhysicsGrade = 5, ComputerScienceGrade = 4 });
        studentsQueue.Enqueue(new Student { LastName = "Смирнов", FirstName = "Смирно", Course = 2, MathGrade = 5, PhysicsGrade = 5, ComputerScienceGrade = 5 });

        string worstStudentQueue = FindWorstStudent(studentsQueue);
        Console.WriteLine($"Студент 2-го курса с худшими оценками (очередь): {worstStudentQueue}");
    }

    static string FindWorstStudent(Student[] students)
    {
        string worstStudent = "";
        double worstAverage = double.MaxValue;
        foreach (var student in students)
        {
            if (student.Course == 2)
            {

double average = student.AverageGrade();
                if (average < worstAverage)
                {
                    worstAverage = average;
                    worstStudent = $"{student.LastName} {student.FirstName}";
                }
            }
        }
        return worstStudent;
    }

    static string FindWorstStudent(Queue<Student> students)
    {
        string worstStudent = "";
        double worstAverage = double.MaxValue;

        foreach (var student in students)
        {
            if (student.Course == 2)
            {
                double average = student.AverageGrade();
                if (average < worstAverage)
                {
                    worstAverage = average;

                    worstStudent = $"{student.LastName} {student.FirstName}";
                }
            }
        }
        return worstStudent;
    }
}
*/

//задание 6//

class Person
{
    public string Name { get; set; }
}

class Student : Person
{
    public int StudentId { get; set; }
}

class TestCollections<TKey, TValue>
    where TKey : Person, new()
    where TValue : Student, new()
{
    public Dictionary<TKey, TValue> Collection2 { get; set; }

    public TestCollections(int count)
    {
        Collection2 = new Dictionary<TKey, TValue>(count);
        for (int i = 0; i < count; i++)
        {
            TKey person = new TKey { Name = $"Имя {i + 1}" };
            TValue student = new TValue { StudentId = i + 1, Name = person.Name };

            
            if (!Collection2.ContainsKey(person))
            {
                Collection2[person] = student;
            }
        }
    }
}

class Program
{
    static void Main()
    {
        TestCollections<Person, Student> test = new TestCollections<Person, Student>(5);

       
        MeasureContainsValueTime(test.Collection2, null, "Не существующий элемент по значению");
    }

    static void MeasureContainsValueTime(Dictionary<Person, Student> dictionary, Student value, string itemName)
    {
        Stopwatch stopwatch = Stopwatch.StartNew();
        bool containsValue = dictionary.ContainsValue(value);
        stopwatch.Stop();
        Console.WriteLine($"{itemName}: {containsValue}, время: {stopwatch.ElapsedTicks} тактов");
    }
}






Работу выполнили Усенко Дмитрий(закрыл 5,6,8,9) (ИП-22) и Козин Андрей(закрыл 5,6) (ИП-21)
